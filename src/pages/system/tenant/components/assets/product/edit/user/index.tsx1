import { Drawer, Button, Table, message, Switch, Transfer, Tag, Form, Checkbox } from "antd";
import React, { useState, Fragment, useEffect, useContext } from "react";
import Service from "@/pages/system/tenant/service";
import { TenantContext } from "@/pages/system/tenant/detail";
import { ListData } from "@/services/response";
import difference from 'lodash/difference';
import styles from '../../../index.less';
interface Props {
    close: Function
    asset: any
}


// Customize Table Transfer
const TableTransfer = ({ leftColumns, rightColumns, ...restProps }) => (
    <Transfer {...restProps} showSelectAll={false}>
        {({
            direction,
            filteredItems,
            onItemSelectAll,
            onItemSelect,
            selectedKeys: listSelectedKeys,
            disabled: listDisabled,
        }) => {
            const columns = direction === 'left' ? leftColumns : rightColumns;

            const rowSelection = {
                getCheckboxProps: item => ({ disabled: listDisabled || item.disabled }),
                onSelectAll(selected, selectedRows) {
                    const treeSelectedKeys = selectedRows
                        .filter(item => !item.disabled)
                        .map(({ key }) => key);
                    const diffKeys = selected
                        ? difference(treeSelectedKeys, listSelectedKeys)
                        : difference(listSelectedKeys, treeSelectedKeys);
                    onItemSelectAll(diffKeys, selected);
                },
                onSelect({ key }, selected) {
                    onItemSelect(key, selected);
                },
                selectedRowKeys: listSelectedKeys,
            };

            return (
                <Table
                    // rowKey="id"
                    rowSelection={rowSelection}
                    columns={columns}
                    dataSource={filteredItems}
                    size="small"
                    style={{ pointerEvents: listDisabled ? 'none' : null }}
                    onRow={({ key, disabled: itemDisabled }) => ({
                        // onClick: () => {
                        //     if (itemDisabled || listDisabled) return;
                        //     onItemSelect(key, !listSelectedKeys.includes(key));
                        // },
                    })}
                />
            );
        }}
    </Transfer>
);


const User = (props: Props) => {
    const service = new Service('tenant');
    const { asset } = props;
    const [loading, setLoading] = useState<boolean>(false);
    const [checkedUserList, setCheckedUserList] = useState<string[]>([]);
    const [selectedAssetsId, setSelectedAssetsId] = useState<string[]>([]);
    const [list, setList] = useState<ListData<any>>();
    const data = useContext(TenantContext);
    const [targetKeys, setTargetKeys] = useState([]);
    const [disabled, setDisabled] = useState();
    const [showSearch, setShowSearch] = useState();

    const bind = () => {
        setLoading(true);
        const bindData: any[] = []

        checkedUserList.forEach(id => bindData.push({
            userId: id,
            assetType: 'product',
            assetIdList: selectedAssetsId,
            allPermission: true,
        }));
        console.log(selectedAssetsId, checkedUserList, 'dddata');
        service.assets.bind(data.id, bindData).subscribe(resp => {
            setLoading(false);
            message.success('绑定成功')
        });
    }

    useEffect(() => {
        // service.member.query(data.id, {}).subscribe(resp => {
        // const temp = resp;
        // temp.data = temp.data.map((item: any) => ({ ...item, key: item.userId, disabled: false }))
        // console.log(temp, 'temp');
        // setList(temp);
        // });

        service.assets.members(data.id, 'product', asset.id).subscribe(resp => {
            // const ids = resp.map((item: any) => item.userId)
            console.log(resp, 'respp');

            const temp = resp
                .filter((i: any) => i.binding === false)
                .map((item: any) => ({ ...item, key: item.userId, disabled: false }))
            console.log(temp, 'tttt');
            setList(temp);
            // setTargetKeys(ids);
        });
    }, []);


    const leftTableColumns = [
        {
            dataIndex: 'userName',
            title: '名称',
        },
        // {
        //     dataIndex: 'state',
        //     title: '状态',
        //     render: (state: any) => <Tag>{state.text}</Tag>
        // },
        // {
        //     dataIndex: 'permissions',
        //     title: '权限信息',
        //     render: text => JSON.stringify(text)
        // }
    ];
    const rightTableColumns = [
        {
            dataIndex: 'userName',
            title: '姓名',
        },
        {
            dataIndex: 'permissions',
            title: '权限信息',
            render: (permission: { id: string, name: string, allowed: boolean }[], record: any) => {
                const { id } = record;
                return (
                    <div className={styles.actionForm}>
                        <Form.Item>

                            <Checkbox.Group
                                options={permission.map(item => ({
                                    label: item.name,
                                    value: item.id
                                }))}
                            />
                        </Form.Item>
                    </div>
                )
            }
        }
    ];

    useEffect(() => {
        service.assets.members(data.id, asset.id, 'product').subscribe(resp => {
            console.log(resp, 'resp');
            setList(resp)
        })
    }, []);


    // const originTargetKeys = list?.data.filter(item => +item.key % 3 > 1).map(item => item.key);


    console.log(targetKeys, 'tarkeys');
    return (
        <Drawer
            title="查看资产"
            visible
            width='58VW'
            onClose={() => props.close()}
        >

            <div>
                <TableTransfer
                    dataSource={list}
                    targetKeys={targetKeys}
                    disabled={disabled}
                    showSearch={showSearch}
                    onChange={nextTargetKeys => {
                        setTargetKeys(nextTargetKeys);
                    }}
                    filterOption={(inputValue, item) =>
                        item.name.indexOf(inputValue) !== -1 || item.tag.indexOf(inputValue) !== -1
                    }
                    leftColumns={leftTableColumns}
                    rightColumns={rightTableColumns}
                />

            </div>
            <div
                style={{
                    position: 'absolute',
                    right: 0,
                    bottom: 0,
                    width: '100%',
                    borderTop: '1px solid #e9e9e9',
                    padding: '10px 16px',
                    background: '#fff',
                    textAlign: 'right',
                }}
            >
                <Button
                    onClick={() => {
                        props.close();
                    }}
                    style={{ marginRight: 8 }}
                >
                    关闭
                </Button>
                <Button
                    onClick={() => {
                        bind()
                    }}
                    type="primary"
                >
                    保存
                </Button>
            </div>
        </Drawer>
    )
}
export default User;